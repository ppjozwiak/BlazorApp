@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using BlazorApp.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Date Is: @datehovering</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th>Increase/Decrease Temp</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td @onmouseover="@(m=> dateMouseHover(m, forecast.Date.ToShortDateString()))"
                        @onmouseout="@(m=> dateMouseLeave())">@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>
                        <div>
                            <div> @forecast.Summary</div>
                            <div> <input type="text" @bind-value="@forecast.Summary" @bind-value:event="oninput" /></div>
                        </div>

                    </td>
                    <td>
                        <button class="increase" @onclick="@(e=>IncreaseTemperature(@forecast, true))"> Increase  </button>
                        <br>
                        <button class="decrease" @onclick="@(e=> IncreaseTemperature(@forecast, false))"> Decrease </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    string datehovering = "";
    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    private void IncreaseTemperature(WeatherForecast forecastObj, bool increase)
    {
        if (increase)
        {
            forecastObj.TemperatureC += 1;   
        }
        else
        {
            forecastObj.TemperatureC -= 1;
        }
    }

    private void dateMouseHover(MouseEventArgs m, string date)
    {
        datehovering = date + "/ mouse coordinates " + m.ClientX + " " + m.ClientY;
    }

    private void dateMouseLeave()
    {
        datehovering = "";
    }

}
